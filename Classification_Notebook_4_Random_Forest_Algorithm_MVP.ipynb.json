{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "3607535b",
   "metadata": {},
   "source": [
    "<b> This Jupyter notebook will serve as my MVP for the Classification regression module.</b> "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39010ec5",
   "metadata": {},
   "source": [
    "<b> This jupyter notebook contains a baseline random forest model for my asteroid data. The next step will be to dive deeper into the confusion matrix. I will also explore the feature importance chart to evaluate how the model is already performing so well without any feature engineering. The cross validaiton scores are all roughly 0.999 </b>"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f49823a8",
   "metadata": {},
   "source": [
    "<b> Asteroid's are constantly being monitored in our solar system. This model would create faster automation of data labeling for asteroids. Developing a model to classify each asteroid into the correct cluster has scientific value.  Many times there are features missing from an asteroid observation due to technical limitations. We are interested in creating a model with the fewest number of features in order to classify each asteroid in the correct cluster.</b>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "1f163caa",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "%config InlineBackend.figure_formats = ['svg']\n",
    "%matplotlib inline\n",
    "\n",
    "sns.set(context='notebook', style='whitegrid')\n",
    "\n",
    "np.set_printoptions(suppress=True) # Suppress scientific notation where possible\n",
    "\n",
    "from sklearn import datasets\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import train_test_split \n",
    "from sklearn.metrics import precision_score, recall_score, precision_recall_curve,f1_score, fbeta_score\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.metrics import classification_report, confusion_matrix\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.model_selection import StratifiedKFold"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "eca23c67",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/rachelbryn/opt/anaconda3/envs/metis/lib/python3.8/site-packages/IPython/core/interactiveshell.py:3169: DtypeWarning: Columns (9) have mixed types.Specify dtype option on import or set low_memory=False.\n",
      "  has_raised = await self.run_ast_nodes(code_ast.body, cell_name,\n"
     ]
    }
   ],
   "source": [
    "# Read in my csv \n",
    "Asteroid_Data = pd.read_csv('Asteroid_Data_Cleaned_136889.csv')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "ae76fcf2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the Unnamed: 0 column\n",
    "# Asteroid_Data.drop(['Unnamed: 0'], axis = 1, inplace = True)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "29e969c3",
   "metadata": {},
   "source": [
    "<B> BELOW IS THE RANDOM FOREST MODEL WITH THE STRATIFIED DATA </B>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9cb70f17",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the binary class "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "40e9b3ce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop the smaller asteroid classes "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "ef4ff40c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Identify my X\n",
    "# Put in my features that I want \n",
    "# My X is my dataframe with the classifying Y target column removed\n",
    "X = Asteroid_Data.drop('class', axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "cd835114",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Specify my Y \n",
    "y = Asteroid_Data['class']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "26a9ec02",
   "metadata": {},
   "outputs": [],
   "source": [
    "# implementing train-test-split\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify= y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1b375499",
   "metadata": {},
   "outputs": [],
   "source": [
    "# random forest model creation\n",
    "rfc = RandomForestClassifier()\n",
    "rfc.fit(X_train,y_train)\n",
    "# predictions\n",
    "rfc_predict = rfc.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "b155db4a",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/rachelbryn/opt/anaconda3/envs/metis/lib/python3.8/site-packages/sklearn/model_selection/_split.py:666: UserWarning: The least populated class in y has only 5 members, which is less than n_splits=10.\n",
      "  warnings.warn((\"The least populated class in y has only %d\"\n"
     ]
    }
   ],
   "source": [
    "# rfc_cv_score = cross_val_score[rfc, X, y, cv=10, scoring=’roc_auc’]\n",
    "scores = cross_val_score(rfc, X=X_train, y=y_train, cv= StratifiedKFold(10) , n_jobs=-1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "c4203201",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Cross Validation accuracy scores: [0.99954346 0.99990868 0.99990868 0.99972605 0.99990868 0.99981737\n",
      " 0.99981737 1.         0.99972605 0.99990868]\n",
      "Cross Validation accuracy: 0.9998 +/- 0.0001\n"
     ]
    }
   ],
   "source": [
    "print('Cross Validation accuracy scores: %s' % scores)\n",
    " \n",
    "print('Cross Validation accuracy: %.4f +/- %.4f' % (np.mean(scores),np.std(scores)))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8aad0408",
   "metadata": {},
   "source": [
    "<b> Random Tree cross validation accuracy scores with 10 folds: </b>\n",
    "\n",
    "Cross Validation accuracy scores: [0.99954346 0.99990868 0.99990868 0.99972605 0.99990868 0.99981737\n",
    " 0.99981737 1.         0.99972605 0.99990868]\n",
    "Cross Validation accuracy: 0.9998 +/- 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1b9a25ab",
   "metadata": {},
   "source": [
    "<b> Random Tree Cross validation accuracy scores with 8 folds</b>: \n",
    "\n",
    "Cross Validation accuracy scores: [0.99970779 0.99978085 0.99963474 0.9998539  0.9998539  0.99992695\n",
    " 0.99978085 1.        ]\n",
    "Cross Validation accuracy: 0.9998 +/- 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f91d6172",
   "metadata": {},
   "source": [
    "<b> Cross validation accuracy scores with 5 folds </b>: \n",
    "\n",
    "Cross Validation accuracy scores: [0.99968041 0.99977171 0.99995434 0.99995434 0.99981737]\n",
    "Cross Validation accuracy: 0.9998 +/- 0.0001"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5d4c1f6f",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "1703b448",
   "metadata": {},
   "source": [
    "<B> Random forests have many many degrees of freedom, so it is relatively easy for them to get to the point that they have near 100% accuracy in-sample. This is merely an overfitting problem. Likely you want to use some tuning parameters to reduce the model complexity some (reduce tree depth, raise minimal node size, etc). Some degree of cross-validation would help you here. Alternatively, it still has the best oob performance..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "11a992e3",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Create a confusion matrix "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "14f40620",
   "metadata": {},
   "outputs": [],
   "source": [
    "### Get feature importance (https://scikit-learn.org/stable/auto_examples/ensemble/plot_forest_importances.html) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6ce8a257",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:metis] *",
   "language": "python",
   "name": "conda-env-metis-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.10"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
